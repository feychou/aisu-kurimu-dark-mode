{"version":3,"sources":["components/colors/Colors.module.css","components/moods/Moods.module.css","components/ice-cream-wrapper/IceCreamWrapper.module.css","components/light-toggler/LightToggler.module.css","data.js","stateContext.js","components/colors/Color.js","components/colors/index.js","components/colors/ColorList.js","components/ice-cream-wrapper/index.js","components/ice-cream-wrapper/IceCreamWrapper.js","components/moods/index.js","components/moods/Moods.js","components/light-toggler/index.js","components/light-toggler/LightToggler.js","app/App.js","app/index.js","serviceWorker.js","index.js"],"names":["module","exports","colors","darkModeColors","moods","StateContext","createContext","StateContextProvider","children","userPrefersDark","window","matchMedia","matches","useState","selectedColor","setSelectedColor","selectedMood","setSelectedMood","darkModeOn","setDarkModeOn","Provider","value","Color","color","index","useContext","className","styles","ColorSquareWrapper","ColorSquare","ColorSquareSelected","style","backgroundColor","onClick","ColorList","currColors","Colors","map","IceCreamWrapper","Ghost","size","mood","IceCream","Moods","MoodWrapper","MoodWrapperSelected","Planet","Mood","LightToggler","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02154e3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Colors\":\"Colors_Colors__2483t\",\"ColorSquareWrapper\":\"Colors_ColorSquareWrapper__24ja_\",\"ColorSquare\":\"Colors_ColorSquare__23yL8\",\"ColorSquareSelected\":\"Colors_ColorSquareSelected__4nlbk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Moods\":\"Moods_Moods__2JMhM\",\"MoodWrapper\":\"Moods_MoodWrapper__1PsPZ\",\"MoodWrapperSelected\":\"Moods_MoodWrapperSelected__2ptnj\",\"Mood\":\"Moods_Mood__Yiau-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"IceCreamWrapper\":\"IceCreamWrapper_IceCreamWrapper__3FC7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LightToggler\":\"LightToggler_LightToggler__3Xa2o\"};","const colors = [\n  \"#F6A7DC\",\n  \"#F7F25D\",\n  \"#90F9E8\",\n  \"#9DE295\",\n  \"#F6B672\",\n  \"#DFABF2\",\n  \"#C8C6EF\",\n  \"#B2E2F7\"\n];\n\nconst darkModeColors = [\n  \"#93B5C6\",\n  \"#C9CCD5\",\n  \"#E4D8DC\",\n  \"#FFE3E3\",\n  \"#FEF5ED\",\n  \"#D3E4CD\",\n  \"#ADC2A9\",\n  \"#99A799\"\n];\n\nconst moods = [\n  \"sad\",\n  \"shocked\",\n  \"happy\",\n  \"blissful\",\n  \"lovestruck\",\n  \"excited\",\n  \"ko\"\n];\n\nexport { colors, darkModeColors, moods };\n","import { createContext, useState } from 'react'\nimport { moods } from './data'\n\nexport const StateContext = createContext({})\n\nconst StateContextProvider = ({ children }) => {\n  const userPrefersDark =\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n\n  const [selectedColor, setSelectedColor] = useState(0)\n  const [selectedMood, setSelectedMood] = useState(moods[0])\n  const [darkModeOn, setDarkModeOn] = useState(userPrefersDark)\n\n  return (\n    <StateContext.Provider\n      value={{\n        selectedColor,\n        setSelectedColor,\n        selectedMood,\n        setSelectedMood,\n        darkModeOn,\n        setDarkModeOn,\n      }}\n    >\n      {children}\n    </StateContext.Provider>\n  )\n}\n\nexport default StateContextProvider\n","import { useContext } from \"react\";\n\nimport { StateContext } from \"../../stateContext\";\nimport styles from \"./Colors.module.css\";\n\nexport default function Color({ color, index }) {\n  const { selectedColor, setSelectedColor } = useContext(StateContext);\n\n  return (\n    <span className={styles.ColorSquareWrapper}>\n      <span\n        key={color}\n        className={`${styles.ColorSquare} ${\n          index === selectedColor ? styles.ColorSquareSelected : \"\"\n        }`}\n        style={{ backgroundColor: color }}\n        onClick={() => setSelectedColor(index)}\n      />\n    </span>\n  );\n}\n","import ColorList from \"./ColorList\";\n\nexport default ColorList;\n","import { useContext } from \"react\";\nimport { colors, darkModeColors } from \"../../data\";\nimport { StateContext } from \"../../stateContext\";\n\nimport Color from \"./Color\";\nimport styles from \"./Colors.module.css\";\n\nexport default function ColorList() {\n  const { darkModeOn } = useContext(StateContext);\n  const currColors = darkModeOn ? darkModeColors : colors;\n\n  return (\n    <div className={styles.Colors}>\n      {currColors.map((color, index) => (\n        <Color color={color} index={index} />\n      ))}\n    </div>\n  );\n}\n","import IceCreamWrapper from './IceCreamWrapper';\n\nexport default IceCreamWrapper;","import { useContext } from \"react\";\nimport { IceCream, Ghost } from \"react-kawaii\";\nimport { darkModeColors, colors } from \"../../data\";\n\nimport { StateContext } from \"../../stateContext\";\nimport styles from \"./IceCreamWrapper.module.css\";\n\nexport default function IceCreamWrapper() {\n  const { selectedColor, selectedMood, darkModeOn } = useContext(StateContext);\n  const color = darkModeOn\n    ? darkModeColors[selectedColor]\n    : colors[selectedColor];\n\n  return (\n    <div className={styles.IceCreamWrapper}>\n      {darkModeOn ? (\n        <Ghost size={300} color={color} mood={selectedMood} />\n      ) : (\n        <IceCream size={400} color={color} mood={selectedMood} />\n      )}\n    </div>\n  );\n}\n","import Moods from './Moods';\n\nexport default Moods;","import { Planet } from \"react-kawaii\";\nimport { moods } from \"../../data\";\nimport { useContext } from \"react\";\n\nimport { StateContext } from \"../../stateContext\";\nimport styles from \"./Moods.module.css\";\n\nexport default function Moods() {\n  const { selectedMood, setSelectedMood, darkModeOn } = useContext(\n    StateContext\n  );\n  return (\n    <div className={styles.Moods}>\n      {moods.map((mood) => (\n        <span\n          onClick={() => setSelectedMood(mood)}\n          className={`${styles.MoodWrapper} ${\n            mood === selectedMood ? styles.MoodWrapperSelected : \"\"\n          }`}\n          key={mood}\n        >\n          <Planet\n            className={styles.Mood}\n            color={darkModeOn ? \"#FDF1D6\" : \"#fad201\"}\n            mood={mood}\n            size={70}\n          />\n        </span>\n      ))}\n    </div>\n  );\n}\n","import LightToggler from \"./LightToggler\";\nexport default LightToggler;\n","import { StateContext } from \"../../stateContext\";\nimport { Ghost, IceCream } from \"react-kawaii\";\nimport { useContext } from \"react\";\n\nimport styles from \"./LightToggler.module.css\";\n\nexport default function LightToggler() {\n  const { darkModeOn, setDarkModeOn } = useContext(StateContext);\n\n  return (\n    <div\n      onClick={() => {\n        setDarkModeOn(!darkModeOn);\n      }}\n      className={styles.LightToggler}\n    >\n      {darkModeOn ? <IceCream size={50} /> : <Ghost size={45} />}\n    </div>\n  );\n}\n","import { useContext } from \"react\";\n\nimport { StateContext } from \"../stateContext\";\nimport { IceCreamWrapper, Colors, Moods, LightToggler } from \"../components\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const { darkModeOn } = useContext(StateContext);\n  return (\n    <div className={`App ${darkModeOn ? \"darkBG\" : \"\"}`}>\n      <LightToggler />\n      <main>\n        <IceCreamWrapper />\n        <Colors />\n        <Moods />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport StateContextProvider from \"./stateContext\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <StateContextProvider>\n    <App />\n  </StateContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}